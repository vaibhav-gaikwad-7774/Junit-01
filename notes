use the surefire plugin to run the test manualyy 

and the output will be clear as we said in the output screen like we usuallu
template as per seen


"[INFO] Scanning for projects...
[INFO] 
[INFO] [1m---------------------< [0;36mcom.telusko:Junit5-06maven[0;1m >---------------------[m
[INFO] [1mBuilding Junit5-06maven 0.0.1-SNAPSHOT[m
[INFO]   from pom.xml
[INFO] [1m--------------------------------[ jar ]---------------------------------[m
[INFO] 
[INFO] [1m--- [0;32mresources:3.3.1:resources[m [1m(default-resources)[m @ [36mJunit5-06maven[0;1m ---[m
[WARNING] Using platform encoding (UTF-8 actually) to copy filtered resources, i.e. build is platform dependent!
[INFO] Copying 0 resource from src/main/resources to target/classes
[INFO] 
[INFO] [1m--- [0;32mcompiler:3.8.1:compile[m [1m(default-compile)[m @ [36mJunit5-06maven[0;1m ---[m
[INFO] Nothing to compile - all classes are up to date
[INFO] 
[INFO] [1m--- [0;32mresources:3.3.1:testResources[m [1m(default-testResources)[m @ [36mJunit5-06maven[0;1m ---[m
[WARNING] Using platform encoding (UTF-8 actually) to copy filtered resources, i.e. build is platform dependent!
[INFO] Copying 0 resource from src/test/resources to target/test-classes
[INFO] 
[INFO] [1m--- [0;32mcompiler:3.8.1:testCompile[m [1m(default-testCompile)[m @ [36mJunit5-06maven[0;1m ---[m
[INFO] Nothing to compile - all classes are up to date
[INFO] 
[INFO] [1m--- [0;32msurefire:2.22.2:test[m [1m(default-test)[m @ [36mJunit5-06maven[0;1m ---[m
[INFO] 
[INFO] -------------------------------------------------------
[INFO]  T E S T S
[INFO] -------------------------------------------------------
[INFO] Running exampleassert.[1mReverseStringTest[m
[INFO] [1;32mTests run: [0;1;32m2[m, Failures: 0, Errors: 0, Skipped: 0, Time elapsed: 0.013 s - in exampleassert.[1mReverseStringTest[m
[INFO] Running com.telusko.learning.[1mCalcTest[m
[INFO] [1;32mTests run: [0;1;32m1[m, Failures: 0, Errors: 0, Skipped: 0, Time elapsed: 0 s - in com.telusko.learning.[1mCalcTest[m
[INFO] Running com.telusko.learning.[1mTestTrial[m
[INFO] [1;32mTests run: [0;1;32m2[m, Failures: 0, Errors: 0, Skipped: 0, Time elapsed: 0 s - in com.telusko.learning.[1mTestTrial[m
[INFO] Running com.telusko.learning.[1mReverseStringTest[m
[INFO] [1;32mTests run: [0;1;32m1[m, Failures: 0, Errors: 0, Skipped: 0, Time elapsed: 0 s - in com.telusko.learning.[1mReverseStringTest[m
[INFO] Running com.telusko.learning.[1mShapesTest[m
[INFO] [1;32mTests run: [0;1;32m2[m, Failures: 0, Errors: 0, Skipped: 0, Time elapsed: 0 s - in com.telusko.learning.[1mShapesTest[m
[INFO] Running com.telusko.learning.[1mTestTrialTest[m
[INFO] [1;32mTests run: [0;1;32m2[m, Failures: 0, Errors: 0, Skipped: 0, Time elapsed: 0 s - in com.telusko.learning.[1mTestTrialTest[m
[INFO] Running com.telusko.learning.[1mReverseString1Test[m
[INFO] [1;32mTests run: [0;1;32m1[m, Failures: 0, Errors: 0, Skipped: 0, Time elapsed: 0 s - in com.telusko.learning.[1mReverseString1Test[m
[INFO] 
[INFO] Results:
[INFO] 
[INFO] [1;32mTests run: 11, Failures: 0, Errors: 0, Skipped: 0[m
[INFO] 
[INFO] [1m------------------------------------------------------------------------[m
[INFO] [1;32mBUILD SUCCESS[m
[INFO] [1m------------------------------------------------------------------------[m
[INFO] Total time:  1.153 s
[INFO] Finished at: 2025-01-02T21:32:13+05:30
[INFO] [1m------------------------------------------------------------------------[m




14.56:


@Test
	void testcomputeSquareArea() {
		Shapes shape = new Shapes();
		assertNotEquals(161.0, shape.testcomputeSquareArea(4)); 


in these when we correct statement gives assertEquals gives test passed
and in asserNotEquals is tottally opposite to the 
asserEqual

which is like the example
these is assertEquals example

@Test
	void testcomputeSquareArea() {
		Shapes shape = new Shapes();
		assertEquals(16.0, shape.testcomputeSquareArea(4)); 



these is assertNotEquals example


@Test
	void testcomputeSquareArea() {
		Shapes shape = new Shapes();
		assertEquals(16.0, shape.testcomputeSquareArea(4)); 



TestAssertTrue function:

Example

package com.telusko.learning;

import static org.junit.jupiter.api.Assertions.*;

import org.junit.jupiter.api.Test;

class TestAssertTrue {

	@Test
	void test() {
		String str = "Junit";
		assertTrue(str.equals("Junit"));
	}

}

assert array equals() method
15.18


AssertArrayEqual Function which is used to show any array equal 
function which is used to calculate the string easily in the bellow 
example :

"package com.telusko.learning;

import static org.junit.jupiter.api.Assertions.assertArrayEquals;

import java.util.Arrays;

import org.junit.jupiter.api.Test;

class ArrayTesting {
    @Test
    void testArray() {
        int[] expected = {2, 4, 6, 8};
        int[] actual = {4, 8, 6, 2};
        
        
        System.out.println(actual);
        assertArrayEquals(expected, actual, "The arrays are not equal!");
    }
}


"


when in the array Element in the Exception is not matching upto the mark
then it will be printing the proper exception handling the exception


"package com.telusko.learning;

import static org.junit.jupiter.api.Assertions.*;

import org.junit.jupiter.api.Test;

class TestException {

	@Test
	void testSortingArray_exception() {
		try {
		SortingArray array = new SortingArray();
		int unsorted[] = null;
		int sortedArray[] = array.sortingArray(unsorted);
//		for(int elem:sortedArray) {
//			System.out.print(elem);
//		}
	}
		catch(NullPointerException e){
			System.out.println("Exception generated");
			
		}

}}
" and the output will give exception because we declare a array Null
in there


"package com.telusko.learning;

import java.util.Arrays;

public class SortingArray {
	public int[] sortingArray(int[] array) {
		Arrays.sort(array);
		return array;
		
	}

}





"




this will be checking the test cases using actual excecution and 
machinary excecution of the time:

package com.telusko.learning;

import static org.junit.jupiter.api.Assertions.*;

import java.time.Duration;

import org.junit.jupiter.api.Test;

class TestingPerformance {

	@Test
	void testSortingMethod_Performance() {
		SortingArray  array = new SortingArray();
		
		int unsorted[] = {2,6,1};
		
		assertTimeout(Duration.ofMillis(10), ()-> array.sortingArray(unsorted));
		
	}

}a



sortingArray.java

package com.telusko.learning;

import java.util.Arrays;

public class SortingArray {
	public int[] sortingArray(int[] array) {
		for(int i = 0; i<1000000; i++) {
			Arrays.sort(array);
			
		}
		return array;
		
	}

}


asserttimeout use t check the junit test case will exceucute in certain timelimit
or not


15.44


























"